
const { models } = require('../../database/index');
var moment = require("moment");
const { Op } = require("sequelize")
/***
 * 
 * @description Date - 29-12-2021 Create By Dipesh 
 * Update By 
 * 
 */
async function insertServices(params) {
    try {
        const { ISSOCIAL } = params;
        params.MEDITATION_START_DATE = moment(new Date()).startOf('day');
        let meditationData = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "TRIAL" } })
        meditationData.dataValues.URLS = process.env.AWS_IMAGE_URL;
        params.MEDITATION_ID = meditationData.dataValues.MEDITATION_ID;
        let oldMeditation = [params.MEDITATION_ID];
        let nextMeditation = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "TRIAL", MEDITATION_ID: { [Op.notIn]: oldMeditation } } });
        params.NEXT_MEDITATION_ID = nextMeditation.dataValues.MEDITATION_ID;
        params.MEDITATION_IDS = meditationData.dataValues.MEDITATION_ID.toString() + ',' + nextMeditation.dataValues.MEDITATION_ID;
        let lastDate = moment().endOf('date').add(Number(process.env.TRIAL_DAYS) - 1, 'day'); // Fix By Keyur -- Trial
        params.SUBCRIPTION_DAYS = Number(process.env.TRIAL_DAYS);
        params.SUBCRIPTION_END_DATE = lastDate;
        params.ISSUBCRIBE = true;
        if (!ISSOCIAL) {
            const { TYPE } = params;
            if (TYPE.toUpperCase() === "NORMAL") {
                const { EMAIL, PASSWORD } = params;
                let countEmailUser = await models.User.count({ where: { EMAIL: EMAIL } });
                if (countEmailUser === 0 && PASSWORD.length > 0) {
                    var insertSave = await models.User.create(params);
                    if (insertSave != undefined) {
                        return {
                            status: true,
                            msg: "Create Successfully.",
                            data: insertSave,
                            meditationData,
                            nextMeditation,
                            TRIAL_DAYS: Number(process.env.TRIAL_DAYS),
                        }
                    } else {
                        /// 502
                        return {
                            status: false,
                            msg: "Error on Insert Data."
                        }
                    }
                } else {
                    return {
                        status: false,
                        msg: "Email already register."
                    }
                }
            } else {
                // Company User Register
                const { COMPANY_CODE } = params;
                const countCompany = await models.Company.count({ where: { COMPANY_CODE: COMPANY_CODE, ISACTIVE: true, ISDELETE: false } })
                const { EMAIL, PASSWORD } = params;
                let countEmailUser = await models.User.count({ where: { EMAIL: EMAIL } });
                if (!!COMPANY_CODE && countCompany === 1 && countEmailUser === 0 && PASSWORD.length > 0) {
                    var insertSave = await models.User.create(params);
                    if (!!insertSave) {
                        return {
                            status: true,
                            msg: "Create Successfully.",
                            data: insertSave,
                            meditationData,
                            nextMeditation,
                            TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                        }
                    } else {
                        /// 502
                        return {
                            status: false,
                            msg: "Error on Insert Data."
                        }
                    }
                } else {
                    if (countEmailUser > 0) {
                        return {
                            status: false,
                            msg: "Please Enter Email must be unique."
                        }
                    } else if (!countCompany) {
                        return {
                            status: false,
                            msg: "Please Enter Company Code must be valid."
                        }
                    } else {
                        return {
                            status: false,
                            msg: "Email already register."
                        }
                    }
                }
            }
        } else {
            const { SOCIAL_ID } = params;

            if (!!SOCIAL_ID > 0) {
                let countUserId = await models.User.count({ where: { SOCIAL_ID: SOCIAL_ID } });
                if (countUserId === 0) {
                    var insertSave = await models.User.create(params);
                    if (insertSave != undefined) {
                        return {
                            status: true,
                            msg: "Create Successfully.",
                            data: insertSave,
                            meditationData,
                            nextMeditation,
                            TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                        }
                    } else {
                        /// 502
                        return {
                            status: false,
                            msg: "Error on Insert Data."
                        }
                    }
                } else {
                    return {
                        status: false,
                        msg: "Account is already exist."
                    }
                }
            } else {
                return {
                    status: false,
                    msg: "Social ID must be fill."
                }

            }
        }
    } catch (error) {
        var errMessage = error.message.split(',\n').join('');
        return {
            status: false,
            msg: errMessage.split('Validation error: ').join('')
        }
    }
}

/***
 * 
 * @description Date - 29-12-2021 Create By Dipesh 
 * Update By 
 * 
 */
async function loginServices(params) {
    try {
        const { ISSOCIAL } = params;
        if (!ISSOCIAL) {
            const { EMAIL, PASSWORD } = params;
            let countEmailUser = await models.User.findOne({ where: { EMAIL: EMAIL, PASSWORD: PASSWORD } });
            if (!!countEmailUser) {
                if (countEmailUser.ISACTIVE && !countEmailUser.ISDELETE) {
                    let userType = await countEmailUser.TYPE;
                    if (userType === "NORMAL") {
                        var givenSubcriptionDate = moment(countEmailUser.SUBCRIPTION_END_DATE);
                        var currentDate = moment(new Date()).startOf('day');
                        var diffrenceSubscriptionDay = moment.duration(givenSubcriptionDate.diff(currentDate)).asDays(); /// Subscription Start Or Not
                        var getSubscriptionDays = countEmailUser.SUBCRIPTION_DAYS;
                        if (diffrenceSubscriptionDay > 0) {
                            var givenMeditationDate = moment(countEmailUser.MEDITATION_START_DATE, "YYYY-MM-DD");
                            var diffrenceMeditationDay = moment.duration(givenMeditationDate.diff(currentDate)).asDays();
                            if (diffrenceMeditationDay === 0) {
                                let myMeditation = await models.Meditation.findByPk(countEmailUser.MEDITATION_ID)
                                myMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                let newMeditation = await models.Meditation.findByPk(countEmailUser.NEXT_MEDITATION_ID)
                                newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                return {
                                    status: true,
                                    msg: "Login Successfully.",
                                    data: countEmailUser,
                                    meditationData: myMeditation,
                                    nextMeditation: newMeditation,
                                    TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                                }
                            } else {
                                ///
                                /// Send TRIAL DAYS
                                ///
                                if (getSubscriptionDays === Number(process.env.TRIAL_DAYS)) {
                                    let oldMeditation = countEmailUser.MEDITATION_IDS.split(",");
                                    let totalMeditation = await models.Meditation.count({ where: { MEDITATION_TYPE: "TRIAL" } });
                                    if (totalMeditation <= oldMeditation.length) {
                                        let newMeditation = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "TRIAL" } });
                                        newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                        let updateMEDITATION_IDS = newMeditation.dataValues.MEDITATION_ID;
                                        let currentMeditation = await models.Meditation.findOne({ where: { MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID } });
                                        currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                        await models.User.update({ 
                                            MEDITATION_IDS: updateMEDITATION_IDS, 
                                            MEDITATION_START_DATE: currentDate, 
                                            MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID, 
                                            NEXT_MEDITATION_ID: newMeditation.dataValues.MEDITATION_ID, 
                                            ISSTRIKE: false }, { where: { USER_ID: countEmailUser.USER_ID } });
                                        return {
                                            status: true,
                                            msg: "Login Successfully.",
                                            data: countEmailUser,
                                            meditationData: currentMeditation,
                                            nextMeditation: newMeditation,
                                            TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                                        }
                                    } else {
                                        let newMeditation = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "TRIAL", MEDITATION_ID: { [Op.notIn]: oldMeditation } } });
                                        newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                        let updateMEDITATION_IDS = countEmailUser.MEDITATION_IDS + "," + newMeditation.dataValues.MEDITATION_ID;
                                        let currentMeditation = await models.Meditation.findOne({ where: { MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID } });
                                        currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                        await models.User.update({ 
                                            MEDITATION_IDS: updateMEDITATION_IDS, 
                                            MEDITATION_START_DATE: currentDate, 
                                            MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID, 
                                            NEXT_MEDITATION_ID: newMeditation.dataValues.MEDITATION_ID, 
                                            ISSTRIKE: false }, { where: { USER_ID: countEmailUser.USER_ID } });
                                        return {
                                            status: true,
                                            msg: "Login Successfully.",
                                            data: countEmailUser,
                                            meditationData: currentMeditation,
                                            nextMeditation: newMeditation,
                                            TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                                        }
                                    }
                                }
                                ///
                                /// Send Regular Days
                                ///
                                else {
                                    let oldMeditation = countEmailUser.MEDITATION_IDS.split(",");
                                    let totalMeditation = await models.Meditation.count({ where: { MEDITATION_TYPE: "REGULAR" } });
                                    if (totalMeditation <= oldMeditation.length) {
                                        let newMeditation = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "REGULAR" } });
                                        newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                        let updateMEDITATION_IDS = newMeditation.dataValues.MEDITATION_ID;
                                        let currentMeditation = await models.Meditation.findOne({ where: { MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID } });
                                        currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                        await models.User.update({ 
                                            MEDITATION_IDS: updateMEDITATION_IDS, 
                                            MEDITATION_START_DATE: currentDate, 
                                            MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID, 
                                            NEXT_MEDITATION_ID: newMeditation.dataValues.MEDITATION_ID, 
                                            ISSTRIKE: false }, { where: { USER_ID: countEmailUser.USER_ID } });
                                        return {
                                            status: true,
                                            msg: "Login Successfully.",
                                            data: countEmailUser,
                                            meditationData: currentMeditation,
                                            nextMeditation: newMeditation,
                                            TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                                        }
                                    } else {
                                        let newMeditation = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "REGULAR", MEDITATION_ID: { [Op.notIn]: oldMeditation } } });
                                        newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                        let updateMEDITATION_IDS = countEmailUser.MEDITATION_IDS + "," + newMeditation.dataValues.MEDITATION_ID;
                                        let currentMeditation = await models.Meditation.findOne({ where: { MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID } });
                                        currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                        await models.User.update({ MEDITATION_IDS: updateMEDITATION_IDS, MEDITATION_START_DATE: currentDate, MEDITATION_ID: newMeditation.dataValues.MEDITATION_ID, ISSTRIKE: false}, { where: { USER_ID: countEmailUser.USER_ID } });
                                        return {
                                            status: true,
                                            msg: "Login Successfully.",
                                            data: countEmailUser,
                                            meditationData: currentMeditation,
                                            nextMeditation: newMeditation,
                                            TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                                        }
                                    }
                                }
                            }
                        } else {
                            await models.User.update({ ISSUBCRIBE: false, SUBCRIPTION_DAYS: 0 }, { where: { USER_ID: countEmailUser.USER_ID } });
                            let findUser = await models.User.findByPk(countEmailUser.USER_ID);
                            let deleteMeditation = await models.Meditation.findByPk(countEmailUser.MEDITATION_ID)
                            deleteMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                            let currentMeditation = await models.Meditation.findByPk(countEmailUser.NEXT_MEDITATION_ID)
                            currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                            return {
                                status: true,
                                msg: "Login Successfully.",
                                data: findUser,
                                meditationData: deleteMeditation,
                                nextMeditation: currentMeditation,
                                TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                            }
                        }
                    } else {

                        /// Company
                        var givenSubcriptionDate = moment(countEmailUser.SUBCRIPTION_END_DATE);
                        var currentDate = moment(new Date()).startOf('day');
                        var diffrenceSubscriptionDay = moment.duration(givenSubcriptionDate.diff(currentDate)).asDays(); /// Subscription Start Or Not
                        var getSubscriptionDays = countEmailUser.SUBCRIPTION_DAYS;
                        var givenMeditationDate = moment(countEmailUser.MEDITATION_START_DATE, "YYYY-MM-DD");
                        var diffrenceMeditationDay = moment.duration(givenMeditationDate.diff(currentDate)).asDays();
                        if (diffrenceMeditationDay === 0) {
                            let myMeditation = await models.Meditation.findByPk(countEmailUser.MEDITATION_ID)
                            myMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                            let newMeditation = await models.Meditation.findByPk(countEmailUser.NEXT_MEDITATION_ID)
                            newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                            return {
                                status: true,
                                msg: "Login Successfully.",
                                data: countEmailUser,
                                meditationData: myMeditation,
                                nextMeditation: newMeditation,
                                TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                            }
                        } else {
                            /// TRIAL
                            if (getSubscriptionDays === Number(process.env.TRIAL_DAYS) && diffrenceSubscriptionDay <= 3 && diffrenceMeditationDay > 0) {
                                let oldMeditation = countEmailUser.MEDITATION_IDS.split(",");
                                let totalMeditation = await models.Meditation.count({ where: { MEDITATION_TYPE: "TRIAL" } });
                                if (totalMeditation <= oldMeditation.length) {
                                    let newMeditation = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "TRIAL" } });
                                    newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    let updateMEDITATION_IDS = newMeditation.dataValues.MEDITATION_ID;
                                    let currentMeditation = await models.Meditation.findOne({ where: { MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID } });
                                    currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    await models.User.update({ 
                                        MEDITATION_IDS: updateMEDITATION_IDS, 
                                        MEDITATION_START_DATE: currentDate, 
                                        MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID, 
                                        NEXT_MEDITATION_ID: newMeditation.dataValues.MEDITATION_ID, 
                                        ISSTRIKE: false }, { where: { USER_ID: countEmailUser.USER_ID } });
                                    return {
                                        status: true,
                                        msg: "Login Successfully.",
                                        data: countEmailUser,
                                        meditationData: currentMeditation,
                                        nextMeditation: newMeditation,
                                        TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                                    }
                                } else {
                                    let newMeditation = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "TRIAL", MEDITATION_ID: { [Op.notIn]: oldMeditation } } });
                                    newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    let updateMEDITATION_IDS = countEmailUser.MEDITATION_IDS + "," + newMeditation.dataValues.MEDITATION_ID;
                                    let currentMeditation = await models.Meditation.findOne({ where: { MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID } });
                                    currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    await models.User.update({ 
                                        MEDITATION_IDS: updateMEDITATION_IDS, 
                                        MEDITATION_START_DATE: currentDate, 
                                        MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID, 
                                        NEXT_MEDITATION_ID: newMeditation.dataValues.MEDITATION_ID, 
                                        ISSTRIKE: false }, { where: { USER_ID: countEmailUser.USER_ID } });
                                    return {
                                        status: true,
                                        msg: "Login Successfully.",
                                        data: countEmailUser,
                                        meditationData: newMeditation,
                                        TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                                    }
                                }
                            }
                            /// Regular
                            else {
                                let oldMeditation = countEmailUser.MEDITATION_IDS.split(",");
                                let totalMeditation = await models.Meditation.count({ where: { MEDITATION_TYPE: "REGULAR" } });
                                if (totalMeditation <= oldMeditation.length) {
                                    let newMeditation = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "REGULAR" } });
                                    newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    let updateMEDITATION_IDS = newMeditation.dataValues.MEDITATION_ID;
                                    let currentMeditation = await models.Meditation.findOne({ where: { MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID } });
                                    currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    await models.User.update({ 
                                        MEDITATION_IDS: updateMEDITATION_IDS, 
                                        MEDITATION_START_DATE: currentDate, 
                                        MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID, 
                                        NEXT_MEDITATION_ID: newMeditation.dataValues.MEDITATION_ID, 
                                        ISSTRIKE: false }, { where: { USER_ID: countEmailUser.USER_ID } });
                                    return {
                                        status: true,
                                        msg: "Login Successfully.",
                                        data: countEmailUser,
                                        meditationData: currentMeditation,
                                        nextMeditation: newMeditation,
                                        TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                                    }
                                } else {
                                    let newMeditation = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "REGULAR", MEDITATION_ID: { [Op.notIn]: oldMeditation } } });
                                    newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    let updateMEDITATION_IDS = countEmailUser.MEDITATION_IDS + "," + newMeditation.dataValues.MEDITATION_ID;
                                    let currentMeditation = await models.Meditation.findOne({ where: { MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID } });
                                    currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    await models.User.update({ 
                                        MEDITATION_IDS: updateMEDITATION_IDS, 
                                        MEDITATION_START_DATE: currentDate, 
                                        MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID, 
                                        NEXT_MEDITATION_ID: newMeditation.dataValues.MEDITATION_ID, 
                                        ISSTRIKE: false }, { where: { USER_ID: countEmailUser.USER_ID } });
                                    return {
                                        status: true,
                                        msg: "Login Successfully.",
                                        data: countEmailUser,
                                        meditationData: currentMeditation,
                                        nextMeditation: newMeditation,
                                        TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (!countEmailUser.ISACTIVE) {
                        return {
                            status: false,
                            msg: "You are not active."
                        }
                    } else if (countEmailUser.ISDELETE) {
                        return {
                            status: false,
                            msg: "Your account was deleted by Mindtree."
                        }
                    } else {
                        return {
                            status: false,
                            msg: "Unkonwn Error."
                        }
                    }
                }

            } else {
                return {
                    status: false,
                    msg: "Email and password must be match."
                }
            }
        } else {
            const { SOCIAL_ID } = params;
            let countEmailUser = await models.User.findOne({ where: { SOCIAL_ID: SOCIAL_ID } });
            if (!!countEmailUser) {
                if (countEmailUser.ISACTIVE && !countEmailUser.ISDELETE) {
                    var givenSubcriptionDate = moment(countEmailUser.SUBCRIPTION_END_DATE);
                    var currentDate = moment(new Date()).startOf('day');
                    var diffrenceSubscriptionDay = moment.duration(givenSubcriptionDate.diff(currentDate)).asDays(); /// Subscription Start Or Not
                    var getSubscriptionDays = countEmailUser.SUBCRIPTION_DAYS;
                    if (diffrenceSubscriptionDay > 0) {
                        var givenMeditationDate = moment(countEmailUser.MEDITATION_START_DATE, "YYYY-MM-DD");
                        var diffrenceMeditationDay = moment.duration(givenMeditationDate.diff(currentDate)).asDays();
                        if (diffrenceMeditationDay === 0) {
                            let myMeditation = await models.Meditation.findByPk(countEmailUser.MEDITATION_ID)
                            myMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                            let newMeditation = await models.Meditation.findByPk(countEmailUser.NEXT_MEDITATION_ID)
                            newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                            return {
                                status: true,
                                msg: "Login Successfully.",
                                data: countEmailUser,
                                meditationData: myMeditation,
                                nextMeditation: newMeditation,
                                TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                            }
                        } else {
                            ///
                            /// Send TRIAL DAYS
                            ///
                            if (getSubscriptionDays === Number(process.env.TRIAL_DAYS)) {
                                let oldMeditation = countEmailUser.MEDITATION_IDS.split(",");
                                let totalMeditation = await models.Meditation.count({ where: { MEDITATION_TYPE: "TRIAL" } });
                                if (totalMeditation <= oldMeditation.length) {
                                    let newMeditation = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "TRIAL" } });
                                    newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    let updateMEDITATION_IDS = newMeditation.dataValues.MEDITATION_ID;
                                    let currentMeditation = await models.Meditation.findOne({ where: { MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID } });
                                    currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    await models.User.update({ 
                                        MEDITATION_IDS: updateMEDITATION_IDS, 
                                        MEDITATION_START_DATE: currentDate,
                                        MEDITATION_ID: currentMeditation.NEXT_MEDITATION_ID, 
                                        NEXT_MEDITATION_ID: newMeditation.dataValues.MEDITATION_ID, 
                                        ISSTRIKE: false
                                    }, { where: { SOCIAL_ID: SOCIAL_ID } });
                                    return {
                                        status: true,
                                        msg: "Login Successfully.",
                                        data: countEmailUser,
                                        meditationData: currentMeditation,
                                        nextMeditation: newMeditation,
                                        TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                                    }
                                } else {
                                    let newMeditation = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "TRIAL", MEDITATION_ID: { [Op.notIn]: oldMeditation } } });
                                    newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    let updateMEDITATION_IDS = countEmailUser.MEDITATION_IDS + "," + newMeditation.dataValues.MEDITATION_ID;
                                    let currentMeditation = await models.Meditation.findOne({ where: { MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID } });
                                    currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    await models.User.update({ 
                                        MEDITATION_IDS: updateMEDITATION_IDS, 
                                        MEDITATION_START_DATE: currentDate, 
                                        MEDITATION_ID: currentMeditation.NEXT_MEDITATION_ID, 
                                        NEXT_MEDITATION_ID: newMeditation.dataValues.MEDITATION_ID, 
                                        ISSTRIKE: false }, { where: { SOCIAL_ID: SOCIAL_ID } });
                                    return {
                                        status: true,
                                        msg: "Login Successfully.",
                                        data: countEmailUser,
                                        meditationData: currentMeditation,
                                        nextMeditation: newMeditation,
                                        TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                                    }
                                }
                            }
                            ///
                            /// Send Regular Days
                            ///
                            else {
                                let oldMeditation = countEmailUser.MEDITATION_IDS.split(",");
                                let totalMeditation = await models.Meditation.count({ where: { MEDITATION_TYPE: "REGULAR" } });
                                if (totalMeditation <= oldMeditation.length) {
                                    let newMeditation = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "REGULAR" } });
                                    newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    let updateMEDITATION_IDS = newMeditation.dataValues.MEDITATION_ID;
                                    let currentMeditation = await models.Meditation.findOne({ where: { MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID } });
                                    currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    await models.User.update({ 
                                        MEDITATION_IDS: updateMEDITATION_IDS, 
                                        MEDITATION_START_DATE: currentDate, 
                                        MEDITATION_ID: currentMeditation.NEXT_MEDITATION_ID, 
                                        NEXT_MEDITATION_ID: newMeditation.dataValues.MEDITATION_ID, 
                                        ISSTRIKE: false
                                     }, { where: { SOCIAL_ID: SOCIAL_ID } });
                                    return {
                                        status: true,
                                        msg: "Login Successfully.",
                                        data: countEmailUser,
                                        meditationData: currentMeditation,
                                        nextMeditation: newMeditation,
                                        TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                                    }
                                } else {
                                    let newMeditation = await models.Meditation.findOne({ where: { MEDITATION_TYPE: "REGULAR", MEDITATION_ID: { [Op.notIn]: oldMeditation } } });
                                    newMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    let updateMEDITATION_IDS = countEmailUser.MEDITATION_IDS + "," + newMeditation.dataValues.MEDITATION_ID;
                                    let currentMeditation = await models.Meditation.findOne({ where: { MEDITATION_ID: countEmailUser.NEXT_MEDITATION_ID } });
                                    currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                                    await models.User.update({ 
                                        MEDITATION_IDS: updateMEDITATION_IDS, 
                                        MEDITATION_START_DATE: currentDate, 
                                        MEDITATION_ID: currentMeditation.NEXT_MEDITATION_ID, 
                                        NEXT_MEDITATION_ID: newMeditation.dataValues.MEDITATION_ID, 
                                    }, { where: { SOCIAL_ID: SOCIAL_ID } });
                                    return {
                                        status: true,
                                        msg: "Login Successfully.",
                                        data: countEmailUser,
                                        meditationData: currentMeditation,
                                        nextMeditation: newMeditation,
                                        TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                                    }
                                }
                            }
                        }
                    } else {
                        await models.User.update({ ISSUBCRIBE: false, SUBCRIPTION_DAYS: 0 }, { where: { SOCIAL_ID: SOCIAL_ID } });
                        let findUser = await models.User.findByPk(countEmailUser.USER_ID);
                        let deleteMeditation = await models.Meditation.findByPk(countEmailUser.MEDITATION_ID)
                        deleteMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                        let currentMeditation = await models.Meditation.findByPk(countEmailUser.NEXT_MEDITATION_ID)
                        currentMeditation.dataValues.URLS = process.env.AWS_IMAGE_URL;
                        return {
                            status: true,
                            msg: "Login Successfully.",
                            data: findUser,
                            meditationData: deleteMeditation,
                            nextMeditation: currentMeditation,
                            TRIAL_DAYS: Number(process.env.TRIAL_DAYS)
                        }
                    }
                } else {
                    if (!countEmailUser.ISACTIVE) {
                        return {
                            status: false,
                            msg: "You are not active."
                        }
                    } else if (countEmailUser.ISDELETE) {
                        return {
                            status: false,
                            msg: "Your account was deleted by Mindtree."
                        }
                    } else {
                        return {
                            status: false,
                            msg: "Unkonwn Error."
                        }
                    }
                }
            } else {
                /// 502
                return {
                    status: false,
                    msg: "Please Sign Up."
                }
            }
        }
    } catch (error) {
        var errMessage = error.message.split(',\n').join('');
        return {
            status: false,
            msg: errMessage.split('Validation error: ').join('')
        }
    }
}

/***
 * 
 * @description Date - 29-12-2021 Create By Dipesh 
 * Update By 
 * 
 */
async function subscriptionServices(params) {
    try {
        const { USER_ID, SUBCRIPTION_TYPE } = params;
        let lastDate = moment().add(SUBCRIPTION_TYPE, 'day');
        let getUserData = await models.User.findByPk(USER_ID);
        if (!!getUserData) {
            // 
            if (getUserData.ISSUBCRIBE && getUserData.SUBCRIPTION_DAYS !== Number(process.env.TRIAL_DAYS)) {
                return {
                    status: false,
                    msg: "Already Subscription."
                }
            } else {
                await models.User.update({ SUBCRIPTION_DAYS: SUBCRIPTION_TYPE, SUBCRIPTION_END_DATE: lastDate, ISSUBCRIBE: true }, { where: { USER_ID: USER_ID } });
                getUserData = await models.User.findByPk(USER_ID);
                return {
                    status: true,
                    msg: "You are now primium user. Enjoy!!!",
                    data: getUserData
                }
            }

        } else {
            return {
                status: false,
                msg: "Subscription not update."
            }
        }
    } catch (error) {
        var errMessage = error.message.split(',\n').join('');
        return {
            status: false,
            msg: errMessage.split('Validation error: ').join('')
        }
    }
}

/***
 * 
 * @description Date - 29-12-2021 Create By Dipesh 
 * Update By 
 * 
 */
async function meditationServices(params) {
    try {
        const { USER_ID } = params;
        let getUserData = await models.User.findByPk(USER_ID);
        if (!!getUserData) {
            console.log(getUserData)
            if (!getUserData.ISSTRIKE) {
                let newStrike = getUserData.STRIKE + 1;
                let totalStrike = getUserData.TOTAL_STRIKE + 1;
                let longestStrike = getUserData.LONGEST_STRIKE;
                if (longestStrike < newStrike) {
                    await models.User.update({ STRIKE: newStrike, ISSTRIKE: true, TOTAL_STRIKE: totalStrike, LONGEST_STRIKE: newStrike }, { where: { USER_ID: USER_ID } });
                } else {
                    await models.User.update({ STRIKE: newStrike, ISSTRIKE: true, TOTAL_STRIKE: totalStrike }, { where: { USER_ID: USER_ID } });
                }
                getUserData = await models.User.findByPk(USER_ID);
                return {
                    status: true,
                    msg: "Your strike complete.",
                    data: getUserData
                }
            } else {
                return {
                    status: false,
                    msg: "Already Strike Completed."
                }
            }
        } else {
            return {
                status: false,
                msg: "Strike not update."
            }
        }
    } catch (error) {
        var errMessage = error.message.split(',\n').join('');
        return {
            status: false,
            msg: errMessage.split('Validation error: ').join('')
        }
    }
}


async function infoServices(params) {
    try {
        let data = await models.Meditation.findAll({ where: { MEDITATION_TYPE: "INFO" } });
        return {
            status: true,
            data
        }
    } catch (error) {
        var errMessage = error.message.split(',\n').join('');
        return {
            status: false,
            msg: errMessage.split('Validation error: ').join('')
        }
    }
}


module.exports = { insertServices, loginServices, subscriptionServices, meditationServices, infoServices };